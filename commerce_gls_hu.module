<?php

/**
 * @file commerce_gls_hu.module
 *
 * author: dj
 * created: 2017.08.28. - 6:55:45
 *
 * Description of commerce_gls_hu
 */

/**
 * Implements hook_library_info_build().
 *
 * Prepare library google map api js with stored key value.
 */
function commerce_gls_hu_library_info_build() {
  $key = '';
  if ($config = \Drupal::config('commerce_gls_hu.glshuadmin')) {
    $key = $config->get('gls_map_api_key');
  }

  $libraries = [];

  $libraries['commerce_gls_hu.google_map'] = [
    'version' => '3.x',
    'header' => false,
    'js' => [
      '//maps.googleapis.com/maps/api/js?v=3&key=' . $key => [
        'type' => 'external',
        'minified' => true,
      ],
    ],
  ];

  return $libraries;
}

/**
 * Implements hook_theme_registry_alter().
 *
 * @param array $theme_registry
 */
function commerce_gls_hu_theme_registry_alter(&$theme_registry) {
  $path = drupal_get_path('module', 'commerce_gls_hu');
  $theme_registry['commerce_order__admin']['path'] = $path . '/templates';
}

/**
 * Implements hook_preprocess_commerce_checkout_form__with_sidebar().
 *
 * @param array $variables
 */
function commerce_gls_hu_preprocess_commerce_checkout_form__with_sidebar(&$variables) {
  if ($variables['form']['#step_id'] === 'order_information') {
    // Get Gls libraries if method is Gls point.
    $variables['form']['#attached']['library'][] = 'commerce_gls_hu/jquery.init';
    $variables['form']['#attached']['library'][] = 'commerce_gls_hu/commerce_gls_hu.google_map';
    $variables['form']['#attached']['library'][] = 'commerce_gls_hu/online.gls-hungary';
    $variables['form']['#attached']['library'][] = 'commerce_gls_hu/shipping.map_init';
    $variables['form']['#attached']['library'][] = array(
      'data' => array('address' => 'aaaaa'),
      'type' => 'setting'
    );
  }
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * @param array $element
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param array $context
 */
function commerce_gls_hu_field_widget_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
  if ($context['widget']->getPluginId() === 'commerce_shipping_rate') {
    $element['#ajax']['callback'] = 'commerce_gls_hu_shipping_pane_service_details_refresh';
    $element['#ajax']['wrapper'] = 'checkout-pane-gls-hu-wrapper';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function commerce_gls_hu_form_commerce_checkout_flow_multistep_default_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $a, $b, $c) {
  $gls_point_destination = [];
  if ($order = $form_state->getBuildInfo()['callback_object']->getOrder()) {
    $values = $order->get('gls_point_destination')->getValue();
    if (!empty($values[0])) {
      $gls_point_destination = $values[0];
    }
  }

  if ($form['#step_id'] === 'order_information') {
    // Order information step.
    $is_gls = _commerce_gls_hu_method_is_gls($form, $form_state);
    $form['shipping_information']['shipments'][0]['shipping_method']['commerce_gls_hu_shipping_wrapper'] = [
      '#type' => 'container',
      '#prefix' => '<div id="checkout-pane-gls-hu-wrapper">',
      '#suffix' => '</div>',
      '#tree' => TRUE,
    ];

    $form['shipping_information']['shipments'][0]['shipping_method']['commerce_gls_hu_shipping_wrapper']['map'] = array(
      '#markup' => '',
      '#prefix' => '<div id="big-canvas" class="' . ($is_gls ? '' : 'hide') . '">',
      '#suffix' => '</div>',
    );

    $form['shipping_information']['shipments'][0]['shipping_method']['commerce_gls_hu_shipping_wrapper']['gls_data'] = array(
      '#type' => 'container',
      '#tree' => TRUE,
    );

    foreach (_commerce_gls_hu_get_gls_fields() as $field_name => $value) {
      $form['shipping_information']['shipments'][0]['shipping_method']['commerce_gls_hu_shipping_wrapper']['gls_data'][$field_name] = array(
        '#type' => 'hidden',
        '#value' => (!empty($gls_point_destination[$field_name]) && $is_gls) ? gls_point_destination[$field_name] : '',
        '#attributes' => array(
          'id' => $values['id'],
        ),
      );
    }

    $form['actions']['next']['#submit'][] = 'commerce_gls_hu_form_commerce_checkout_flow_multistep_default_submit';
    $form['#submit'][] = 'commerce_gls_hu_form_commerce_checkout_flow_multistep_default_submit';
  }
  elseif ($form['#step_id'] === 'review') {
    // Order review step.
    $rows = [];
    foreach (_commerce_gls_hu_get_gls_fields() as $key => $value) {
      if (isset($value['visible']) &&
          $value['visible'] === TRUE &&
          !empty($gls_point_destination[$key])) {
        $label = isset($value['label']) ? $value['label'] : t(ucfirst(str_replace('_', ' ', $key)));
        $rows[] = [
          $label,
          $gls_point_destination[$key],
        ];
      }
    }
    if (!empty($rows)) {
      $form['review']['shipping_information']['summary'][0]['gls_point_destination']['data'] = [
        '#theme' => 'table',
        '#header' => [],
        '#rows' => $rows,
      ];
    }
  }
}

/**
 * Ajax callback.
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function commerce_gls_hu_shipping_pane_service_details_refresh($form, \Drupal\Core\Form\FormStateInterface $form_state) {
  return $form['shipping_information']['shipments'][0]['shipping_method']['commerce_gls_hu_shipping_wrapper'];
}

/**
 * Callback submit.
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function commerce_gls_hu_form_commerce_checkout_flow_multistep_default_submit($form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $gls_choosed = FALSE;
  if ($order = $form_state->getBuildInfo()['callback_object']->getOrder()) {
    if (_commerce_gls_hu_method_is_gls($form, $form_state)) {
      if (!empty($form_state->getUserInput()['shipping_information']['shipments'][0]['shipping_method_wrapper']['commerce_gls_hu_shipping_wrapper']['gls_data'])) {
        $gls_data = $form_state->getUserInput()['shipping_information']['shipments'][0]['shipping_method_wrapper']['commerce_gls_hu_shipping_wrapper']['gls_data'];
        if (!empty($form_state->getBuildInfo()['callback_object']->getOrder())) {
          $order->set('gls_point_destination', [$gls_data]);
          $gls_choosed = TRUE;
        }
      }
    }
    if ($gls_choosed === FALSE) {
      $order->set('gls_point_destination', []);
    }

    $order->save();
  }
}

/**
 * Helper function to check shipment method.
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *
 * @return boolean
 */
function _commerce_gls_hu_method_is_gls($form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $is_gls = FALSE;
  $widget = $form['shipping_information']['shipments'][0]['shipping_method']['widget'][0];
  $default_value = $widget['#default_value'];
  if ($input = $form_state->getUserInput()) {
    if (!empty($input['shipping_information']['shipments'][0]['shipping_method'][0])) {
      $default_value = $input['shipping_information']['shipments'][0]['shipping_method'][0];
    }
  }
  if (isset($widget[$default_value]) && $service = $widget[$default_value]) {
    if (isset($service['#shipping_method_id']) &&
        $rate = \Drupal::entityManager()->getStorage('commerce_shipping_method')->load($service['#shipping_method_id'])) {
      $is_gls = $rate->getPlugin()->getPluginId() === 'gls_hu';
    }
  }

  return $is_gls;
}

function _commerce_gls_hu_get_gls_fields() {
  return [
    'shop_id' => [
      'id' => 'store-shop-id-value',
      'visible' => FALSE,
    ],
    'store_gmap_address' => [
      'id' => 'store-gmap-address-value',
      'visible' => FALSE,
    ],
    'pclshopid' => [
      'id' => 'store-pclshopid-value',
      'label' => t('Shop id'),
      'visible' => TRUE,
    ],
    'name' => [
      'id' => 'store-name-value',
      'label' => t('GLS point name'),
      'visible' => TRUE,
    ],
    'ctrcode' => [
      'id' => 'store-ctrcode-value',
      'visible' => FALSE,
    ],
    'zipcode' => [
      'id' => 'store-zipcode-value',
      'label' => t('Zip'),
      'visible' => TRUE,
    ],
    'city' => [
      'id' => 'store-city-value',
      'label' => t('City'),
      'visible' => TRUE,
    ],
    'address' => [
      'id' => 'store-address-value',
      'label' => t('Address'),
      'visible' => TRUE,
    ],
    'contact' => [
      'id' => 'store-contact-value',
      'label' => t('Contact'),
      'visible' => TRUE,
    ],
    'phone' => [
      'id' => 'store-phone-value',
      'label' => t('Phone'),
      'visible' => TRUE,
    ],
    'email' => [
      'id' => 'store-email-value',
      'label' => t('Email'),
      'visible' => TRUE,
    ],
  ];
}
